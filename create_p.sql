-- вариант переноса изменений в таблице p1 в p2 
DROP TABLE IF EXISTS orders;

CREATE TABLE p1 (
    id bigint DEFAULT nextval('orders_id_seq'::regclass),
    account_id bigint,
    client_id bigint NOT NULL,
    items_price numeric(10,2),
    CONSTRAINT p1_pkey PRIMARY KEY (id, account_id)
);

-- Indices -------------------------------------------------------

CREATE UNIQUE INDEX p1_pkey ON p1(id int8_ops,account_id int8_ops);

-- DDL generated by Postico 2.0.4
-- Not all database features are supported. Do not use for backup.

-- Table Definition ----------------------------------------------

CREATE TABLE p2 (
    id bigint DEFAULT nextval('orders_id_seq'::regclass),
    account_id bigint,
    client_id bigint NOT NULL,
    items_price numeric(10,2),
    CONSTRAINT p2_pkey PRIMARY KEY (id, account_id)
);


CREATE UNIQUE INDEX p2_pkey ON p2(id int8_ops,account_id int8_ops);

-- TODO: вынести имена таблиц в параметры
 
CREATE OR REPLACE FUNCTION sync_tables()
RETURNS TRIGGER AS $$
DECLARE
  column_list text;
  query text;
BEGIN
  SELECT string_agg(quote_ident(column_name), ', ')
  INTO column_list
  FROM information_schema.columns
  WHERE table_name = TG_TABLE_NAME;

  IF TG_OP = 'INSERT' THEN 
    query := format('INSERT INTO p2 (%s) SELECT %s FROM p1 WHERE id = %s', column_list, column_list, NEW.id);
  ELSIF TG_OP = 'UPDATE' THEN
    query := format('UPDATE p2 SET (%s) = (SELECT %s FROM p1 WHERE id = %s) WHERE id = %s', column_list, column_list, NEW.id, OLD.id);
  ELSIF TG_OP = 'DELETE' THEN
    query := format('DELETE FROM p2 WHERE id = %s', OLD.id);
  END IF;

  EXECUTE query;
  
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE
    RETURN NEW;
  END IF;

END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER copy_changes
AFTER INSERT OR UPDATE OR DELETE ON p1
FOR EACH ROW EXECUTE PROCEDURE sync_tables();


-- -----------------

insert into p1(account_id, client_id, items_price)
values (6, 7, 8)
